import pygame
import random
import sys

# Inicialización de Pygame
pygame.init()

# Dimensiones de la pantalla
screen_width = 800
screen_height = 600

# Colores
white = (255, 255, 255)
blue = (0, 0, 255)
red = (255, 0, 0)
yellow = (255, 255, 0)

# Creación de la pantalla
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Space Shooter Game")

# Cargar imagen de fondo
background_image = pygame.image.load("space_background.jpg")
background_image = pygame.transform.scale(background_image, (screen_width, screen_height))

# Cargar imagen de la nave y redimensionarla
original_player_image = pygame.image.load("spaceship.png")
player_image = pygame.transform.scale(original_player_image, (50, 50))

# Cargar imagen del enemigo y redimensionarla
original_enemy_image = pygame.image.load("alien_ship_transparent.png")
# Cambia las dimensiones de la imagen de la nave enemiga (por ejemplo, 60x60)
enemy_image = pygame.transform.scale(original_enemy_image, (60, 60))


# Cargar imagen del rayo y redimensionarla
ray_image = pygame.Surface((5, 20))
ray_image.fill(yellow)

# Cargar imagen del rayo enemigo y redimensionarla
enemy_ray_image = pygame.Surface((5, 20))
enemy_ray_image.fill(red)

# Cargar imagen del superpoder y redimensionarla
power_image = pygame.Surface((30, 30))
power_image.fill(blue)

# Clase para la nave del jugador
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = player_image
        self.rect = self.image.get_rect()
        self.rect.centerx = screen_width // 2
        self.rect.centery = screen_height - 50
        self.speed = 5
        self.health = 3
        self.power = 1
        self.power_timer = pygame.time.get_ticks()
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT]:
            self.rect.x += self.speed
        if keys[pygame.K_UP]:
            self.rect.y -= self.speed
        if keys[pygame.K_DOWN]:
            self.rect.y += self.speed
        self.rect.x = max(0, min(self.rect.x, screen_width - self.rect.width))
        self.rect.y = max(0, min(self.rect.y, screen_height - self.rect.height))

        now = pygame.time.get_ticks()
        if now - self.power_timer > 5000:
            self.power_timer = now
            self.power = 1

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:
                ray = Ray(self.rect.centerx, self.rect.top)
                all_sprites.add(ray)
                rays.add(ray)
            elif self.power == 2:
                ray1 = Ray(self.rect.left, self.rect.centery)
                ray2 = Ray(self.rect.right, self.rect.centery)
                all_sprites.add(ray1)
                all_sprites.add(ray2)
                rays.add(ray1)
                rays.add(ray2)

    def powerup(self):
        self.power += 1
        self.power_timer = pygame.time.get_ticks()

# Clase para los enemigos
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = enemy_image
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - self.rect.width)
        self.rect.y = -self.rect.height
        self.speed = random.randint(1, 3)
        self.shoot_delay = random.randint(1000, 3000)
        self.last_shot = pygame.time.get_ticks()

    def update(self):
        self.rect.y += self.speed
        if self.rect.y > screen_height:
            self.kill()

        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            ray = EnemyRay(self.rect.centerx, self.rect.bottom)
            all_sprites.add(ray)
            enemy_rays.add(ray)

# Clase para los rayos
class Ray(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = ray_image
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed = -10

    def update(self):
        self.rect.y += self.speed
        if self.rect.bottom < 0:
            self.kill()

# Clase para los rayos enemigos
class EnemyRay(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = enemy_ray_image
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.top = y
        self.speed = 5

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > screen_height:
            self.kill()

# Clase para los superpoderes
class Powerup(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = power_image
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - self.rect.width)
        self.rect.y = -self.rect.height
        self.speed = random.randint(1, 2)

    def update(self):
        self.rect.y += self.speed
        if self.rect.y > screen_height:
            self.kill()

# Grupos de sprites
all_sprites = pygame.sprite.Group()
enemies = pygame.sprite.Group()
enemy_rays = pygame.sprite.Group()
rays = pygame.sprite.Group()
powerups = pygame.sprite.Group()

# Creación del jugador
player = Player()
all_sprites.add(player)

# Función para generar enemigos
def create_enemy():
    new_enemy = Enemy()
    all_sprites.add(new_enemy)
    enemies.add(new_enemy)

# Función para generar superpoderes
def create_powerup():
    powerup = Powerup()
    all_sprites.add(powerup)
    powerups.add(powerup)

# Reloj para controlar la velocidad del juego
clock = pygame.time.Clock()
enemy_timer = pygame.time.get_ticks()
powerup_timer = pygame.time.get_ticks()

# Puntuación
score = 0
font = pygame.font.Font(None, 36)

# Bucle principal del juego
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.shoot()

    # Crear enemigos a intervalos regulares
    now = pygame.time.get_ticks()
    if now - enemy_timer > 2000:
        create_enemy()
        enemy_timer = now

    # Crear superpoderes a intervalos regulares
    if now - powerup_timer > 10000:
        create_powerup()
        powerup_timer = now

    # Actualizar todos los sprites
    all_sprites.update()

    # Comprobar colisiones entre rayos y enemigos
    hits = pygame.sprite.groupcollide(enemies, rays, True, True)
    for hit in hits:
        score += 10
        create_enemy()

    # Comprobar colisiones entre nave y poderes
    hits = pygame.sprite.spritecollide(player, powerups, True)
    for hit in hits:
        player.powerup()

    # Comprobar colisiones entre enemigos y la nave del jugador
    hits = pygame.sprite.spritecollide(player, enemies, True)
    for hit in hits:
        player.health -= 1
        if player.health == 0:
            running = False

    # Comprobar colisiones entre balas del jugador y enemigos
    hits = pygame.sprite.groupcollide(rays, enemies, True, True)
    for hit in hits:
        score += 10
        create_enemy()

    # Comprobar colisiones entre balas enemigas y el jugador
    hits = pygame.sprite.spritecollide(player, enemy_rays, True)
    for hit in hits:
        player.health -= 1
        if player.health == 0:
            running = False

    # Dibujar fondo
    screen.blit(background_image, (0, 0))

    # Dibujar sprites
    all_sprites.draw(screen)

    # Actualizar y mostrar puntuación
    score_text = font.render("Score: " + str(score), True, white)
    screen.blit(score_text, (10, 10))

    # Actualizar la pantalla
    pygame.display.flip()

    # Controlar la velocidad del juego
    clock.tick(60)

# Bucle principal del juego
running = True
game_over = False

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.shoot()

    # ... (código de manejo de enemigos y colisiones)

    # Dibujar fondo
    screen.blit(background_image, (0, 0))

    # Dibujar sprites
    all_sprites.draw(screen)

    # Actualizar y mostrar puntuación
    score_text = font.render("Score: " + str(score), True, white)
    screen.blit(score_text, (10, 10))

    # Actualizar la pantalla
    pygame.display.flip()

    # Controlar la velocidad del juego
    clock.tick(60)

    # Comprobar si el jugador perdió
    if player.health == 0:
        game_over = True

    # Mostrar pantalla de "Game Over" si el juego terminó
    # Mostrar pantalla de "Game Over" si el juego terminó
    while game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    game_over = False
                    player.health = 3
                    player.power = 1
                    score = 0
                    all_sprites.empty()
                    enemies.empty()
                    enemy_rays.empty()
                    rays.empty()
                    powerups.empty()
                    player.rect.centerx = screen_width // 2
                    player.rect.centery = screen_height - 50
                    all_sprites.add(player)  # Agregar nuevamente la nave del jugador al grupo de sprites

     

        screen.blit(background_image, (0, 0))

        game_over_text = font.render("GAME OVER", True, red)
        score_text = font.render("Score: " + str(score), True, white)
        restart_text = font.render("Press ENTER to restart", True, white)
        screen.blit(game_over_text, (screen_width // 2 - 100, screen_height // 2 - 50))
        screen.blit(score_text, (screen_width // 2 - 50, screen_height // 2))
        screen.blit(restart_text, (screen_width // 2 - 100, screen_height // 2 + 50))

        pygame.display.flip()
        clock.tick(60)

pygame.quit()
sys.exit()
